// Prisma schema for Trinity AI

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  accounts  Account[]
  sessions  Session[]
  memberships Membership[]
  createdAt DateTime @default(now())
}

model Org {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  members   Membership[]
  plans     Plan[]
  programs  ProgramTemplate[]
  agents    Agent[]
  usage     Usage[]
  public    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Membership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  role      String   @default("owner")
  createdAt DateTime @default(now())
}

model Plan {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  horizon   Int
  json      Json
  createdAt DateTime @default(now())
}

model JournalEntry {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  authorId  String
  text      String
  createdAt DateTime @default(now())
}

model Habit {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  cadence   String
  target    Int?
  createdAt DateTime @default(now())
}

model HabitLog {
  id        String   @id @default(cuid())
  habit     Habit    @relation(fields: [habitId], references: [id])
  habitId   String
  date      DateTime
  done      Boolean  @default(false)
}

model Checkin {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  date      DateTime
  tasks     Json
  mood      Int
  energy    Int
  notes     String?
}

model Agent {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  yaml      String
  createdAt DateTime @default(now())
}

model ProgramTemplate {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  description String?
  horizon   Int
  plan      Json
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Usage {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  date      DateTime
  tokens    Int      @default(0)
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

